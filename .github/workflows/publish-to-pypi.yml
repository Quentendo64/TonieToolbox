name: Build and Upload Python Package

on:
  release:
    types: [created]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (leave empty to use version from __init__.py)'
        required: false
        type: string

permissions:
  id-token: write
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "version=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')" >> $GITHUB_OUTPUT
      
      - name: Extract release notes from CHANGELOG.md
        id: extract_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Looking for version $VERSION in CHANGELOG.md"
          
          # Extract the section for this version from CHANGELOG.md
          # Looking for headers like "## [0.1.5] - 2025-04-20"
          awk -v ver="$VERSION" '
            BEGIN { found=0; }
            $0 ~ "^## \\[" ver "\\] - " { found=1; print; next; }
            /^## \[/ { if(found) exit; }
            found { print; }
          ' CHANGELOG.md > release_notes.md
          
          # Check if we found any content
          if [ ! -s release_notes.md ]; then
            echo "No entry found in CHANGELOG.md for version $VERSION"
            echo "Using default release notes"
            echo "## Release v$VERSION" > release_notes.md
            echo "Release v$VERSION" >> release_notes.md
          else
            echo "Found changelog entry for version $VERSION:"
            cat release_notes.md
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body_path: release_notes.md
          generate_release_notes: false

  deploy:
    needs: [create-release]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Set version from tag
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
        sed -i "s/__version__ = .*/__version__ = '$VERSION'/" TonieToolbox/__init__.py
        echo "Using version: $VERSION from tag"
    
    - name: Set version if provided
      if: github.event.inputs.version != ''
      run: |
        # Update version in __init__.py if explicitly provided via workflow_dispatch
        sed -i "s/__version__ = .*/__version__ = '${{ github.event.inputs.version }}'/" TonieToolbox/__init__.py

    - name: Build package
      run: python -m build
    
    - name: Check built package
      run: twine check dist/*
    
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true