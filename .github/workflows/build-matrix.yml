name: Build Matrix Testing

on:
  push:
    branches: [ main, Develop ]
  pull_request:
    branches: [ main, Develop ]
  workflow_dispatch:
    inputs:
      debug_tests:
        description: 'Enable debug output for tests'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  DEBUG_TESTS: ${{ inputs.debug_tests || false }}

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.14']
        architecture: [amd64, arm64]
        exclude:
          - os: windows-latest
            architecture: arm64
          - os: ubuntu-latest
            architecture: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
          ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y ffmpeg opus-tools
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install ffmpeg opus-tools
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install ffmpeg
          # Note: opusenc is typically included with ffmpeg on Windows
        fi

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
        pip install build

    - name: Test package installation
      run: |
        # Test that the package can be installed and imported
        pip install .
        python -c "import TonieToolbox; print('Package imported successfully')"
        tonietoolbox --version || echo "CLI command test failed"

    - name: Test tonietoolbox functionality
      run: |
        DEBUG_FLAG=""
        if [[ "${{ env.DEBUG_TESTS }}" == "true" ]]; then
          DEBUG_FLAG="--debug"
        fi
        
        if ! tonietoolbox ./tests/data/test_audio.mp3 --bitrate 128 $DEBUG_FLAG; then
          echo "Conversion command test failed"
          exit 1
        fi
        if ! tonietoolbox --info ./output/test_audio.taf $DEBUG_FLAG; then
          echo "TAF Info command test failed"
          exit 1
        fi

    - name: Build package
      run: |
        python -m build
        
    - name: Check built package
      run: |
        pip install twine
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.14'
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  build-summary:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "Build matrix completed"
        echo "Test job status: ${{ needs.test.result }}"
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "Some tests failed in the build matrix"
          exit 1
        fi